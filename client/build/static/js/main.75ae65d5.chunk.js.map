{"version":3,"sources":["Components/Display.js","Components/Form.js","Components/Registration.js","Components/One.js","Components/FormAlgo.js","Components/New.js","Components/algorithms.js","AlgoVisualizer/Visualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Display","props","useState","allUsers","setAllUsers","setAllAlgos","getAll","axios","get","then","response","console","log","data","results","useEffect","sort","b","a","name","style","margin","backgroundColor","color","to","className","alignItems","map","user","i","key","algos","algo","width","border","src","image","alt","class","quote","desc","best","worst","aver","_id","onClick","id","delete","Form","action","firstName","lastName","email","password","confirmPassword","newUser","setNewUser","errors","setErrors","hasBeenSubmitted","setHasBeenSubmitted","formMessage","message","navigate","submitHandler","e","preventDefault","validate","put","catch","err","post","changeHandler","curUser","target","value","valid","curErrors","length","maxWidth","display","onSubmit","htmlFor","type","onChange","Registration","setUser","textAlign","padding","borderBottom","setData","submitData","currErrors","properties","One","chests","position","peg","patch","hook","createdAt","updatedAt","pirate","setPirate","maxHeight","_pid","FormAlgo","update","code","newAlgo","setNewAlgo","curAlgo","descs","placeholder","New","verticalAlign","getMergeSortAnimations","array","animations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","j","push","doMerge","SortingVisualizer","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","setTimeout","newHeight","height","getQuickSortAnimations","getBubbleSortAnimations","idx","mergeSort","heapSort","bubbleSort","React","Component","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.75ae65d5.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from '@reach/router';\nimport axios from 'axios';\n\nconst Display = props => {\n    const [allUsers, setAllUsers] = useState([]);\n    const [allAlgos, setAllAlgos] = useState([]);\n    const [algos, setAlgos] = useState([]);\n    \n\n    const getAll = () => {\n        axios.get(\"http://localhost:8000/api/algos/all\")\n            .then(response => {\n                console.log(response);\n                setAllUsers(response.data.results);\n            });\n    }\n        useEffect(() => {\n            getAll();\n        }, []);\n\n\n    const getAllAlgos = () => {\n        axios.get(\"http://localhost:8000/api/algos\")\n            .then(response => {\n                setAllAlgos((response.data.results).sort((b,a) => (b.name > a.name) ? 1: -1));\n            });\n    }\n        useEffect(() => {\n            getAllAlgos();\n        }, []);\n\n    \n    const deleteHandler = (id) => {\n        console.log(id);\n        axios.delete(`http://localhost:8000/api/algos/${id} + aid}`)\n            .then(response => {\n                getAll();\n            })\n    }\n    return (\n        <div>\n            <div style={{ margin:\"5% 2% 4% 2%\"}}>\n            <div style={{margin:\"2% 0% 0% 0%\", backgroundColor:\"brown\", color:\"black\"}}><br></br>\n                <h1 style={{margin:\"6% 0% 0% 0%\",  backgroundColor:\"brown\"}}>Collection</h1>\n                <Link to={ `/users/5f2445a4784acd0598b11ece/new` }><button className=\"col-sm-2 btn btn-success\" style={{margin:\"2% 0% 1% 50%\"}} >Add Algo</button></Link>\n            </div>\n            <div className=\"container\" style={{ alignItems:\"left\" }}><br></br>\n                <div className=\"row\">\n                    {\n                    allUsers.map((user, i) => \n                        <tr key={ i }>\n                            {\n                            user.algos.map((algo, i) =>\n                                <tr key={ i }>\n                                    <div className=\"d-flex p-2\">\n                                    <div className=\"card mb-5 card\" style={{width:\"80%\", border:\"2px solid black\", margin:\"0% 0% 0% 12%\"}}>\n                                        <div className=\"row\">\n                                            <div className=\"col-md-4 container\"><br></br>\n                                                <img src={ algo.image } alt={algo.name} style={{ margin:\"7% 0% 2% 3%\"}} class=\"card-img\" alt={algo.name}/>\n                                                <p class=\"card-text\"><small class=\"text-muted\">{ algo.quote }</small></p><br></br>\n                                            </div>\n                                            <div className=\"col-md-8 container\">\n                                                <div className=\"card-body\">\n                                                <h1 className=\"card-title text-center\">{algo.name}</h1>\n                                                    <p class=\"card-text\"><small class=\"text-muted\">{ algo.desc } with { algo.best } best case and { algo.worst } worst case and { algo.aver } aver case.</small></p>\n                                                    <Link to={ `/users/${algo._id}/algo id here`}><button className=\"btn btn-primary btn-sm\" style={{margin:\"0% 0% 0% 5%\"}}>View Algo</button></Link>&nbsp;\n                                                    <button onClick={ () => deleteHandler(user._id)(algo._id) } className=\"btn btn-danger btn-sm\" style={{margin:\"0% 0% 0% 0%\"}}>Delete the Algo</button>\n                                                </div>\n                                            </div>\n                                            \n                                        </div>\n                                    </div>\n                                    </div>\n                                </tr>\n                            )\n                            }\n                        </tr>\n                    )\n                    }\n                </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Display\n","import React, { useState, useEffect } from 'react';\nimport { navigate } from '@reach/router';\nimport axios from 'axios';\n\nconst Form = props => {\n    const { action } = props;\n    const [newErrors, setNewErrors] = useState([])\n    const [data, setData] = useState([])\n    const [user, setUser] = useState([])\n    const [newUser, setNewUser] = useState({\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\"\n    });\n\n    const [errors, setErrors] = useState({\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\"\n    })\n    \n    const [hasBeenSubmitted, setHasBeenSubmitted] = useState(false);\n\n    const formMessage = () => {\n        if( hasBeenSubmitted ) {\n            return \"Thank you for submitting the form!\";\n        } else {\n            return \"\";\n        }\n    };\n\n    useEffect(() => {\n        if(action === \"edit\"){\n            axios.get(`http://localhost:8000/api/algos/${props.id}/update`)\n                .then(response => {\n                    if(response.data.message === \"Success!\")\n                        setNewUser(response.data.results)\n                    else\n                        navigate(\"/algos/all\");\n                })\n        }\n    },[])\n\n    const submitHandler = e => {\n        e.preventDefault();\n        if(validate(newUser)){\n            if(action === \"edit\"){\n                axios.put(`http://localhost:8000/api/algos/${props.id}`, newUser)\n                    .then(response => {\n                        if(response.data.message === \"Success!\"){\n                            navigate(\"/all\");\n                        }\n                    })\n                    .catch(err => console.log(err));\n            } else {\n                axios.post(`http://localhost:8000/api/algos/new`, newUser)\n                    .then(response => {\n                        if(response.data.message === \"Success!\"){\n                            navigate(\"/all\");\n                        }\n                    })\n                    .catch(err => console.log(err));\n            }\n        }\n    }\n\n    const changeHandler = e => {\n        const curUser = {\n            ...newUser,\n            [e.target.name]: e.target.value\n        }\n\n        validate(curUser);\n        setNewUser(curUser);\n        setHasBeenSubmitted( true );\n    }\n\n    const validate = user => {\n        let valid = false;\n        const {...curErrors} = errors;\n        if(user.firstName.length === 0){\n            curErrors.firstName = \"We'll need a name. This is a required field.\";\n        } else if(user.firstName.length < 2) {\n            curErrors.firstName = \"First name must be at least 2 characters in length.\";\n        } else if(user.firstName.length > 50){\n            curErrors.firstName = \"Yikes. We are going to have trouble with a 50 character name. How about...we go for a nick name here.\";\n        } else {\n            curErrors.firstName = \"\";\n            valid = true;\n        }\n\n        if(user.lastName.length === 0){\n            curErrors.lastName = \"This is a required field.\";\n        } else if(user.lastName.length < 3) {\n            curErrors.lastName = \"Last names must have at least 3 characters.\";\n        } else {\n            curErrors.lastName = \"\";\n            valid = true;\n        }\n\n        if(user.email.length === 0){\n            curErrors.email = \"An email address is a required field.\";\n        } else {\n            curErrors.email = \"\";\n            valid = true;\n        }\n\n        if(user.password.length === 0){\n            curErrors.password = \"This is a required field.\";\n        } else {\n            curErrors.password = \"\";\n            valid = true;\n        }\n\n        if(user.confirmPassword.length === 0){\n            curErrors.confirmPassword = \"This is a required field.\";\n        } else if(user.confirmPassword != user.password) {\n            curErrors.confirmPassword = \"Typo perhaps? Your confirm password must match your password.\";\n        } else {\n            curErrors.confirmPassword = \"\";\n            valid = true;\n        }\n        setErrors(curErrors);\n\n        return valid;\n    }\n\n    const deleteHandler = () => {\n        axios.delete(`http://localhost:8000/api/algos/${props.id}/delete`)\n            .then(response => {\n                if(response.data.message === \"Success!\"){\n                    navigate(\"/all\")\n                }\n            })\n            .catch(err => console.log(err));\n    }\n\n    return (\n        <div>\n            {/* Registration Form */}\n      \n            <div className=\"container\" style={{border:\"3px solid black\", backgroundColor:\"beige\", maxWidth:\"40%\", display:\"inline-block\", margin:\"5% 50% 0% 1%\"}}>\n                <p>{ formMessage() }</p>\n                <div className=\"col-md-6\"style={{backgroundColor:\"beige\"}}> \n                    <h1 style={{margin:\"10% 0% 10% 55%\", backgroundColor:\"beige\"}}>Register</h1>\n                </div>\n                <form onSubmit={ submitHandler } style={{ backgroundColor:\"beige\"}}>\n                    <div>\n                        <div className=\"form-group col-xs-6\">\n                                {\n                                    errors.firstName ? \n                                    <p className=\"col-sm-6 text-left text-nowrap text-danger\">{ errors.firstName }</p>\n                                    :\n                                    ''\n                                }\n                            <label htmlFor=\"firstName\" style={{margin:\"0% 80% 0% 0%\"}}>First Name: </label>\n                            <input \n                                type=\"text\" \n                                name=\"firstName\" \n                                className=\"form-control\"\n                                onChange={ changeHandler }\n                                value={ newUser.firstName }\n                            />\n                        </div>\n\n                        <div className=\"form-group col-xs-6\">\n                            {\n                                errors.lastName ? \n                                <p className=\"col-sm-6  text-sm-left text-danger\">{ errors.lastName }</p>\n                                :\n                                ''\n                            }\n                            <label htmlFor=\"lastName\" style={{margin:\"0% 80% 0% 0%\"}}>Last Name: </label>\n                            <input \n                                type=\"text\" \n                                name=\"lastName\" \n                                className=\"form-control\"\n                                onChange={ changeHandler }\n                                value={ newUser.lastName }\n                            />\n                        </div>\n\n                        <div className=\"form-group col-xs-6\">\n                            {\n                                errors.email ? \n                                <p className=\"col-sm-6 text-nowrap text-danger\">{ errors.email }</p>\n                                :\n                                ''\n                            }\n                            <label htmlFor=\"email\" style={{margin:\"0% 90% 0% 0%\"}}>Email: </label>\n                            <input \n                                type=\"text\" \n                                name=\"email\" \n                                className=\"form-control \"\n                                onChange={ changeHandler }\n                                value={ newUser.email }\n                            />\n                        </div>              \n                    \n                        <div className=\"form-group col-xs-6\">\n                            {\n                                errors.password ? \n                                <p className=\"col-sm-6 text-left text-danger\">{ errors.password }</p>\n                                :\n                                ''\n                            }\n                            <label htmlFor=\"password\" style={{margin:\"0% 90% 0% 0%\"}}>Password: </label>\n                            <input \n                                type=\"password\" \n                                name=\"password\" \n                                className=\"form-control\"\n                                onChange={ changeHandler }\n                                value={ newUser.password }\n                            />\n                        </div>\n                \n                        <div className=\"form-group col-xs-6\">\n                            {\n                                errors.confirmPassword ? \n                                <p className=\"col-sm-8 text-left text-danger\">{ errors.confirmPassword }</p>\n                                :\n                                ''\n                            }\n                            <label htmlFor=\"confirmPassword\" style={{margin:\"0% 65% 0% 0%\"}}>Confirm Password: </label>\n                            <input \n                                type=\"password\" \n                                name=\"confirmPassword\" \n                                className=\"form-control\"\n                                onChange={ changeHandler }\n                                value={ newUser.confirmPassword }\n                            />\n                        </div>\n            \n                        <div className=\"form-group col-xs-6\">\n                            \n                            <input type=\"submit\" value=\"Register\" className=\"col-md-6 btn btn-primary\" style={{margin:\"0% 0% 0% 0%\"}}/>\n                        </div><br></br>\n                    </div>\n                </form>\n            </div>\n\n                {/* Login Form */}\n            <div className=\"container\" style={{border:\"3px solid black\", backgroundColor:\"white\", maxWidth:\"40%\",  margin:\"-500% 1% 50% 50%\", display:\"inline-block\"}}>\n                <p>{ formMessage() }</p>\n                <form onSubmit={ submitHandler }>\n                    <div className=\"col-md-6\"> \n                        <h1 style={{margin:\"10% 0% 10% 55%\", backgroundColor:\"white\"}}>Login</h1>\n                    </div>\n                    <div className=\"form-group col-xs-6\">\n                            {\n                                errors.email ? \n                                <p className=\"col-sm-6 text-left text-danger\">{ errors.email }</p>\n                                :\n                                ''\n                            }\n                            <label htmlFor=\"email\" style={{margin:\"0% 90% 0% 0%\"}}>Email: </label>\n                            <input \n                                type=\"text\" \n                                name=\"email\" \n                                className=\"form-control\"\n                                onChange={ changeHandler }\n                                value={ newUser.email }\n                            />\n                    </div>\n                    <div className=\"form-group col-xs-6\">\n                        {\n                            errors.password ? \n                            <p className=\"col-sm-6 offset-sm-4 text-danger\">{ errors.password }</p>\n                            :\n                            ''\n                        }\n                        <label htmlFor=\"password\" style={{margin:\"0% 90% 0% 0%\"}}>Password: </label>\n                        <input \n                            type=\"text\" \n                            name=\"password\" \n                            className=\"form-control\"\n                            onChange={ changeHandler }\n                            value={ newUser.password }\n                            />\n                    </div>\n                    <input type=\"submit\" value=\"Login\" className=\"col-sm-3 btn btn-primary\" style={{margin:\"0% 0% 5% 8%\"}}/>\n                </form>       \n            </div>\n        </div>\n    )\n}\n\nexport default Form;\n","import React, { useState } from 'react';\nimport Form from './Form';\nimport axios from 'axios';\nimport { navigate } from '@reach/router';\n\nconst Registration = () => {\n    const [user, setUser] = useState({\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\"\n    });\n    const [errors, setErrors] = useState({\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\"\n    })\n\n    const changeHandler = e => {\n        setUser({\n            ...user,\n            [e.target.name]: e.target.value\n        });\n    }\n    \n    const submitData = () => {\n        axios.post(\"http://localhost:8000/api/algos/new\", user)\n            .then(response => {\n                if(response.data.message === \"Success!\"){\n                    setUser({\n                        firstName: \"\",\n                        lastName: \"\",\n                        email: \"\",\n                        password: \"\"\n                    })\n                    navigate(\"/algos/all\");\n                }\n                else {\n                    console.log(response.data.results);\n                    const {...currErrors} = errors\n                    if(response.data.results.errors.firstName){\n                        currErrors.firstName = response.data.results.errors.firstName.properties.message\n                    } else {\n                        currErrors.firstName = \"\";\n                    }\n                    if(response.data.results.errors.lastName){\n                        currErrors.lastName = response.data.results.errors.lastName.properties.message\n                    } else {\n                        currErrors.lastName = \"\";\n                    }\n                    if(response.data.results.errors.email){\n                        currErrors.email = response.data.results.errors.email.properties.message\n                    } else {\n                        currErrors.email = \"\";\n                    }\n                    if(response.data.results.errors.password){\n                        currErrors.password = response.data.results.errors.password.properties.message\n                    } else {\n                        currErrors.password = \"\";\n                    }\n\n                    setErrors(currErrors);\n                }\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }\n    \n    return (\n        \n        <div style={{textAlign:\"center\",  width:\"85%\", padding:\"0px 0px 0px 0px\", margin:\"0% 2% 0% 2%\"}}>\n            <div className=\"container\" style={{textAlign:\"center\", width:\"100%\", padding:\"0px 0px 0px 0px\", backgroundColor:\"#8b572a\", color:\"white\", borderBottom:\"2px solid black\", margin:\"0% 0% 0% 0%\"}}>\n                <h1></h1>\n            </div>\n            <div className=\"container\" style={{backgroundColor:\"white\", width:\"100%\", padding:\"0px 0px 0px 0px\", margin:\"0% 0% 0% 0%\"}}>         \n                <Form data={ user } changeHandler={ changeHandler } errors={ errors } setData={ setUser } submitData={ submitData }/>\n            </div>\n        </div>\n    )\n}\n\nexport default Registration\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios';\nimport { Link } from '@reach/router';\n\nconst One = props => {\n    const [user, setUser] = useState({\n        firstName:\"\"\n    })\n    const [pirate, setPirate] = useState({\n        _id: \"\",\n        name: \"\",\n        image: \"\",\n        chests: \"\",\n        position: \"\",\n        peg: \"\",\n        patch: \"\",\n        hook: \"\",\n        createdAt: \"\",\n        updatedAt: \"\"\n    });\n\n    useEffect( () => {\n        axios.get(`http://localhost:8000/api/pirates/${user.id}/${props.id}`)\n            .then(response => {\n                if(response.data.message === \"Success!\")\n                {\n                    setPirate(response.data.results);\n                }\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }, []);\n\n    return (\n        <div style={{textAlign:\"center\", border:\"3px solid black\", width:\"85%\", padding:\"0px 0px 0px 0px\", margin:\"0% 2% 0% 2%\"}}>\n            <div className=\"container\" style={{textAlign:\"center\", width:\"100%\", padding:\"0px 0px 0px 0px\", backgroundColor:\"#8b572a\", color:\"white\", borderBottom:\"2px solid black\", margin:\"0% 0% 0% 0%\"}}>\n                <h1>{ pirate.name }'s page</h1>\n            </div>\n        <div><br></br>\n        <div className=\"card mb-5 card\" style={{width:\"80%\", border:\"2px solid black\", margin:\"0% 0% 0% 12%\"}}>\n            <div className=\"row\">\n                <div className=\"col-md-4 container\">\n                    <img src={ props.image } alt={props.name} style={{maxHeight:\"300px\", margin:\"7% 0% 0% 3%\"}} class=\"card-img\" />\n                </div>\n                <div>  \n                    <h5>\"Shiver Me Timbers\"</h5>\n                </div>\n                <div className=\"col-md-8 container\">\n                    <div className=\"card-body\">\n                    <h1 className=\"card-title text-center\">{props.position}</h1>\n                        <p class=\"card-text\"><small class=\"text-muted\">A {props.position} with {props.chests} chests!</small></p>\n                        <Link to={ `/users/${props._id}/${props._pid}/update`}><button className=\"btn btn-primary btn-sm\" style={{margin:\"0% 0% 0% 5%\"}}>Update Pirate</button></Link>&nbsp;\n                        {/* <button onClick={ () => deleteHandler(props._id)(props._pid) } className=\"btn btn-danger btn-sm\" style={{margin:\"0% 0% 0% 0%\"}}>Walk the Plank</button> */}\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div className=\"card-body\">\n                <p class=\"card-text\" style={{}}>Peg leg: { props.peg }</p><br></br>\n                <p class=\"card-text\" style={{}}>Eye Patch: { props.patch }</p><br></br>\n                <p class=\"card-text\" style={{}}>Hook Hand: { props.hook }</p><br></br>\n            </div>\n            <div>\n            <Link to=\"/users/all\" style={{margin:\"0% 0% 0% 60%\"}} >Return to Crew </Link> \n            </div> \n        </div>\n        </div>\n    )\n}\n\nexport default One\n","import React, { useState, useEffect } from 'react';\nimport { Link, navigate } from '@reach/router';\nimport axios from 'axios';\n\nconst FormAlgo = props => {\n    const { action, update } = props;\n    const [newErrors, setNewErrors] = useState([]);\n    const [data, setData] = useState([]);\n    const [algo, setAlgo] = useState([]);\n    const [user, setUser] = useState([]);\n    const [newAlgo, setNewAlgo] = useState({\n        name: \"\",\n        image: \"\",\n        desc: \"\",\n        worst: \"\",\n        best: \"\",\n        aver: \"\",\n        quote: \"\",\n        code: \"\"\n    });\n\n    const [errors, setErrors] = useState({\n        name: \"\",\n        image: \"\",\n        desc: \"\",\n        worst: \"\",\n        best: \"\",\n        aver: \"\",\n        quote: \"\",\n        code: \"\"\n    })\n\n    \n    const [hasBeenSubmitted, setHasBeenSubmitted] = useState(false);\n\n    const formMessage = () => {\n        if( hasBeenSubmitted ) {\n            return \"Thank you for adding a new algo to the collection!\";\n        } else {\n            return \"\";\n        }\n    };\n\n    useEffect(() => {\n        if(action === \"update\"){\n            axios.put(`http://localhost:8000/api/algos/${props.id}/update`)\n                .then(response => {\n                    if(response.data.message === \"Success!\")\n                        setNewAlgo(response.data.results)\n                    else\n                        navigate(\"/algos/\");\n                })\n        }\n    },[])\n\n    const submitHandler = e => {\n        e.preventDefault();\n        if(validate(newAlgo)){\n            if(action === \"update\"){\n                axios.put(`http://localhost:8000/api/algos/${props.id}`, newAlgo/update)\n                    .then(response => {\n                        if(response.data.message === \"Success!\"){\n                            navigate(\"/algos/\");\n                        }\n                    })\n                    .catch(err => console.log(err));\n            } \n        }\n    }\n\n    const changeHandler = e => {\n        const curAlgo = {\n            ...newAlgo,\n            [e.target.name]: e.target.value\n        }\n        validate(curAlgo);\n        setNewAlgo(curAlgo);\n        setHasBeenSubmitted( true );\n    }\n\n    const validate = user => {\n        let valid = false;\n        const {...curErrors} = errors;\n        if(user.name.length === 0){\n            curErrors.name = \"The algorithm will need a name. This is a required field.\";\n        } else if(user.name.length < 2) {\n            curErrors.name = \"Algorithm name must be at least 2 characters in length.\";\n        } else {\n            curErrors.name = \"\";\n            valid = true;\n        }\n\n        if(user.image.length === 0){\n            curErrors.image = \"An image url is required.\";\n        } else {\n            curErrors.image = \"\";\n            valid = true;\n        }\n\n        if(user.desc.length === 0){\n            curErrors.descs = \"The description is a required field.\";\n        } else {\n            curErrors.descs = \"\";\n            valid = true;\n        }\n\n        if(user.worst.length === 0){\n            curErrors.worst = \"The worst speed of this algo is a required field.\";\n        } else {\n            curErrors.worst = \"\";\n            valid = true;\n        }\n\n        if(user.best.length === 0){\n            curErrors.best = \"The best speed of this algo is a required field.\";\n        } else {\n            curErrors.best = \"\";\n            valid = true;\n        }\n        if(user.aver.length === 0){\n            curErrors.aver = \"ThAverage speed is a required field.\";\n        } else {\n            curErrors.aver = \"\";\n            valid = true;\n        }\n\n        if(user.quote.length === 0){\n            curErrors.quote = \"Who created this algorithm? Why was it created?\";\n        } else {\n            curErrors.quote = \"\";\n            valid = true;\n        }\n\n        if(user.code.length === 0){\n            curErrors.code = \"This is a required field.\";\n        } else {\n            curErrors.code = \"\";\n            valid = true;\n        }\n\n\n        setErrors(curErrors);\n\n        return valid;\n    }\n\n    const deleteHandler = () => {\n        axios.delete(`http://localhost:8000/api/algos/${user.id}/${props.id}`)\n            .then(response => {\n                if(response.data.message === \"Success!\"){\n                    navigate(\"/users/display/all\")\n                }\n            })\n            .catch(err => console.log(err));\n    }\n\n    return (\n        <div>\n            {/* Create Algo Form */}\n            <div className=\"container\" style={{border:\"2px solid black\", maxWidth:\"40%\", display:\"inline-block\", margin:\"5% 00% 0% 1%\"}}> \n                <div className=\"container\" style={{textAlign:\"center\", width:\"100%\", padding:\"0px 0px 0px 0px\", backgroundColor:\"\", color:\"brown\", margin:\"0% 0% 0% 0%\"}}>\n                    <h1 style={{margin:\"10% 0% 10% 0%\"}}></h1>\n                </div>\n                <form onSubmit={ submitHandler } >\n                    <div>\n                        <div className=\"form-group col-xs-6\">\n                                {\n                                    errors.name ? \n                                    <p className=\"col-sm-6 text-left text-nowrap text-danger\">{ errors.name }</p>\n                                    :\n                                    ''\n                                }\n                            <label htmlFor=\"name\" style={{margin:\"0% 89% 0% 0%\", color: \"grey\"}}>Name: </label>\n                            <input \n                                type=\"text\" \n                                name=\"name\" \n                                className=\"form-control\"\n                                onChange={ changeHandler }\n                                value={ newAlgo.name }\n                                placeholder=\"Algorithm Name\"\n                            />\n                        </div>\n\n                        <div className=\"form-group col-xs-6\">\n                            {\n                                errors.image ? \n                                <p className=\"col-sm-6  text-sm-left text-danger\">{ errors.lastName }</p>\n                                :\n                                ''\n                            }\n                            <label htmlFor=\"image\" style={{margin:\"0% 86% 0% 0%\", color: \"grey\"}}>Image: </label>\n                            <input \n                                type=\"text\" \n                                name=\"image\" \n                                className=\"form-control\"\n                                onChange={ changeHandler }\n                                value={ newAlgo.image }\n                                placeholder=\"Link to url\"\n                            />\n                        </div>\n\n                        <div className=\"form-group col-xs-6\">\n                            {\n                                errors.desc ? \n                                <p className=\"col-sm-6 text-nowrap text-danger\">{ errors.desc }</p>\n                                :\n                                ''\n                            }\n                            <label htmlFor=\"desc\" className=\"formGroupExampleInput\" style={{margin:\"0% 80% 0% 0%\", color: \"grey\"}}>Description: </label>\n                            <input \n                                type=\"text\" \n                                name=\"desc\" \n                                className=\"form-control \"\n                                onChange={ changeHandler }\n                                value={ newAlgo.desc }\n                               \n                            />\n                        </div>              \n                    \n                        <div className=\"form-group col-xs-6\">\n                            {\n                                errors.worst ? \n                                <p className=\"col-sm-6 text-left text-danger\">{ errors.worst }</p>\n                                :\n                                ''\n                            }\n                            <label htmlFor=\"worst\" style={{margin:\"0% 41% 0% 0%\", color: \"grey\"}}>Worst Speed Based on O(n) Value: </label>\n                            <input \n                                type=\"text\" \n                                name=\"worst\" \n                                className=\"form-control\"\n                                onChange={ changeHandler }\n                                value={ newAlgo.worst }\n                                placeholder=\"O(n) value\"\n                            />\n                        </div>\n                \n                        <div className=\"form-group col-xs-6\">\n                            {/* {\n                                errors.best ? \n                                <p className=\"col-sm-8 text-left text-danger\">{ errors.best }</p>\n                                :\n                                ''\n                            } */}\n                            <label className=\"form-check-label\" htmlFor=\"best\" style={{margin:\"0% 42% 0% 0%\", color: \"grey\"}}>Best Speed Based on O(n) Value: </label>\n                            <input \n                                type=\"text\" \n                                name=\"best\" \n                                className=\"form-control\"\n                                onChange={ changeHandler }\n                                value={ newAlgo.best }\n                                placeholder=\"O(n) value\"\n                            />\n                        </div>\n                        <div className=\"form-group col-xs-6\">\n                            {/* {\n                                errors.aver ? \n                                <p className=\"col-sm-8 text-left text-danger\">{ errors.aver }</p>\n                                :\n                                ''\n                            }  */}\n                            <label className=\"form-check-label\" htmlFor=\"aver\" style={{margin:\"0% 39% 0% 0%\", color: \"grey\"}}>Average Speed Based on O(n) Value: </label>\n                            <input \n                                type=\"text\" \n                                name=\"aver\" \n                                className=\"form-control\"\n                                onChange={ changeHandler }\n                                value={ newAlgo.aver }\n                                placeholder=\"O(n) value\"\n                            />\n                        </div>\n                        <div className=\"form-group col-xs-6\">\n                            {/* {\n                                errors.quote ? \n                                <p className=\"col-sm-8 text-left text-danger\">{ errors.quote }</p>\n                                :\n                                ''\n                            } */}\n                            <label className=\"form-check-label\" htmlFor=\"quote\"  style={{margin:\"0% 88% 0% 0%\", color: \"grey\"}}>Quote: </label>\n                            <input \n                                type=\"text\" \n                                onClick=\"true\"\n                                name=\"quote\" \n                                className=\"form-control\"\n                                onChange={ changeHandler }\n                                value={ newAlgo.quote }\n                                placeholder=\"Why was this algorithm created?\"\n                            />\n                        </div>\n                        <div className=\"form-group col-xs-6\">\n                            {/* {\n                                errors.quote ? \n                                <p className=\"col-sm-8 text-left text-danger\">{ errors.quote }</p>\n                                :\n                                ''\n                            } */}\n                            <label className=\"form-check-label\" htmlFor=\"code\"  style={{margin:\"0% 88% 0% 0%\", color: \"grey\"}}>Code: </label>\n                            <input \n                                type=\"text\" \n                                onClick=\"true\"\n                                name=\"code\" \n                                className=\"form-control\"\n                                onChange={ changeHandler }\n                                value={ newAlgo.quote }\n                                placeholder=\"Javascript\"\n                            />\n                        </div>\n                        <div className=\"form-group col-xs-6\">\n                            <input type=\"submit\" value=\"Update\" action=\"update\" className=\"col-md-6 btn btn-primary\" style={{margin:\"0% 0% 0% 45%\"}}/><br></br>\n                            <p style={{color:\"grey\"}}>{ formMessage() }</p>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default FormAlgo;\n","import React, { useState } from 'react';\nimport FormAlgo from './FormAlgo';\nimport axios from 'axios';\nimport { navigate, Link } from '@reach/router';\n\nconst New = () => {\n    const [user, setUser] = useState({\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\"\n    });\n    const [errors, setErrors] = useState({\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\"\n    })\n\n    const changeHandler = e => {\n        setUser({\n            ...user,\n            [e.target.name]: e.target.value\n        });\n    }\n\n    const submitData = () => {\n        axios.post(\"http://localhost:8000/api/users\", user)\n            .then(response => {\n                if(response.data.message === \"Success!\"){\n                    setUser({\n                        firstName: \"\",\n                        lastName: \"\",\n                        email: \"\",\n                        password: \"\"\n                    })\n                    navigate(\"/\");\n                }\n                else {\n                    console.log(response.data.results);\n                    const {...currErrors} = errors\n                    if(response.data.results.errors.firstName){\n                        currErrors.firstName = response.data.results.errors.firstName.properties.message\n                    } else {\n                        currErrors.firstName = \"\";\n                    }\n                    if(response.data.results.errors.lastName){\n                        currErrors.lastName = response.data.results.errors.lastName.properties.message\n                    } else {\n                        currErrors.lastName = \"\";\n                    }\n                    if(response.data.results.errors.email){\n                        currErrors.email = response.data.results.errors.email.properties.message\n                    } else {\n                        currErrors.email = \"\";\n                    }\n                    if(response.data.results.errors.password){\n                        currErrors.password = response.data.results.errors.password.properties.message\n                    } else {\n                        currErrors.password = \"\";\n                    }\n\n                    setErrors(currErrors);\n                }\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }\n    return (\n        <div>\n            <div>\n                <div style={{ margin:\"2% 0% 1% 0%\"}}>\n                    <div style={{margin:\"2% 0% 0% 0%\", backgroundColor:\"brown\", color:\"white\"}}><br></br>\n                        <h1 style={{margin:\"3% 0% 0% 0%\", color: \"white\", backgroundColor:\"brown\", verticalAlign:\"middle\"}}>Add Another One</h1>\n                        <Link to={ `/algos/` }><button className=\"col-sm-2 btn btn-success\" style={{margin:\"1% 0% 2% 75%\"}}>Algorithm Collection</button></Link>\n                        <FormAlgo data={ user } changeHandler={ changeHandler } errors={ errors } setData={ setUser } submitData={ submitData }/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default New\n","export function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n    }\n\n    function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n    ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n    }\n\n    function doMerge(\n        mainArray,\n        startIdx,\n        middleIdx,\n        endIdx,\n        auxiliaryArray,\n        animations,\n        ) {\n        let k = startIdx;\n        let i = startIdx;\n        let j = middleIdx + 1;\n        while (i <= middleIdx && j <= endIdx) {\n\n\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, j]);\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            // We overwrite the value at index k in the original array with the\n            // value at index i in the auxiliary array.\n            animations.push([k, auxiliaryArray[i]]);\n            mainArray[k++] = auxiliaryArray[i++];\n        }   \n            else {\n            // We overwrite the value at index k in the original array with the\n            // value at index j in the auxiliary array.\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n        }\n\n    while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n    // These are the values that being compared; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that being compared; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n    }\n}\n","import React from 'react';\nimport {getMergeSortAnimations} from '../Components/algorithms.js';\nimport {getQuickSortAnimations} from '../Components/quickSort.js';\nimport {getBubbleSortAnimations} from '../Components/bubbleSort.js';\nimport './Visualizer.css';\n\n// Change this value for the speed of the animations. //\nconst ANIMATION_SPEED_MS = 1;\n\n// const speedHandler = (e) =>{\n//     setSpeed(e.target.value);\n// }\n\n// Change this value for the number of bars (value) in the array. //\nconst NUMBER_OF_ARRAY_BARS = 70;\n\n// This is the main color of the array bars.//\nconst PRIMARY_COLOR = 'orange';\n\n// This is the color of array bars that are being compared throughout the animations. //\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray() {\n        const array = [];\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n            array.push(randomIntFromInterval(4, 530));\n        }\n        this.setState({array});\n    }\n\n    mergeSort() {\n        const animations = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n            }, i * ANIMATION_SPEED_MS);\n        }       else {\n                setTimeout(() => {\n                    const [barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                barOneStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    quickSort() {\n        const animations = getQuickSortAnimations(this.state.array);\n        for(let i = 0; i <animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) { \n            }\n        }\n    }\n    \n    bubbleSort() {\n        const animations = getBubbleSortAnimations(this.state.array);\n        for(let i = 0; i <animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) { \n            }\n        }\n    }\n    render() {\n        const {array} = this.state;\n        return (\n            <div>\n                <div className=\"array-container\">\n                {\n                        array.map((value, idx) => (\n                        <div\n                            className=\"array-bar\"\n                            key={idx}\n                            style={{\n                            backgroundColor: PRIMARY_COLOR,\n                            height: `${value}px`,\n                            }}>\n                        </div> \n                        ))\n                    }<br></br>\n                    \n                    <button class=\"button-b\" onClick={() => this.mergeSort()}>Merge Sort</button>\n                    <button class=\"button-c\" onClick={() => this.mergeSort()}>Quick Sort Hoare</button>\n                    <button class=\"button-g\" onClick={() => this.mergeSort()}>Quick Sort Lomuto</button>\n                    <button class=\"button-d\" onClick={() => this.heapSort()}>Heap Sort</button>\n                    <button class=\"button-e\" onClick={() => this.bubbleSort()}>Bubble Sort</button><br></br>\n                    <button class=\"button-f\" onClick={() => this.mergeSort()}>Insertion Sort</button>\n                    <button class=\"button-k\" onClick={() => this.mergeSort()}>Stair Climber</button>\n                    <button class=\"button-a\" onClick={() => this.resetArray()}>Palidrome Tricks</button>\n                    <button class=\"button-i\" style={{backgroundColor:\"green\"}} onClick={() => this.resetArray()}>Create New Array</button>                    \n                </div>\n            </div>\n        );\n    }\n}\n    function randomIntFromInterval(min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n\n    function arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) {\n        return false;\n        }\n    }\n    return true;\n    }\n","import React from 'react';\nimport { Router, Link } from \"@reach/router\";\nimport Display from \"./Components/Display\";\nimport Registration from \"./Components/Registration\"\nimport One from \"./Components/One\";\nimport New from \"./Components/New\";\nimport Update from \"./Components/Update\";\nimport Visualizer from \"./AlgoVisualizer/Visualizer\";\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div>\n      <div className=\"App\">\n        <div>\n          <h1 style={{margin:\"40px 0px 0px 0px\"}}>An Algorithm Visualizer</h1>\n          <h4>A full stack Javascript Project using Express, React, Mongoose and Node. \n            </h4>\n            <h4 style={{margin:\"20px 0px 0px 0px\", color:\"grey\"}}>by Petra Franklin and Tash Elijah Dutton</h4><br></br>\n        </div>\n        <Router>\n          <Visualizer path=\"/\"/>\n          <Registration path=\"/new\"/>\n          <Display path=\"/algos/\"/>\n          <New path=\"/algos/:id/newAlgo\"/>\n          <Update path=\"/algos/:id/:aid/update\"/>\n          <One path=\"/algos/:id/:aid\"/>\n        </Router>\n        <header className=\"text-center\" style={{margin:\"4% 0% 20% 0%\", height:\"75px\", width:\"100%\"}}>\n          <Link to=\"/\">Visualizer</Link> |&nbsp;\n          <Link to=\"/algos/\">Our Algo Collection</Link>  |&nbsp;\n          <Link to=\"/algos/5f2445a4784acd0598b11ece/newAlgo\">Add an Algo</Link> |&nbsp;\n          <Link to=\"/pathfinder\">Playground</Link> |&nbsp;\n          <Link to=\"/pathfinder\">Playground</Link> |&nbsp; \n          <Link to=\"/pathfinder\">Playground</Link> |&nbsp;        \n          <Link to=\"/one/\">Random Algo</Link> |&nbsp;\n          <Link to=\"/new\">Login</Link><br></br>\n        </header><br></br>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}